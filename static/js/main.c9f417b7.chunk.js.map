{"version":3,"sources":["assets/spin.mp3","firebase.js","components/VerifyCard.js","components/main.js","components/ticket.js","assets/clap.mp3","assets/clapman.gif","components/PlayCard.js","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","fireStore","getFirestore","colors","VerifyCard","openDialog","setOpenDialog","list","useState","id","setId","color","setColor","ticketCollectionRef","collection","onlineCards","setOnlineCards","selectedCard","setSelectedCard","useEffect","a","getDocs","data","docs","JSON","parse","sets","players","getTickets","b","parseInt","indexOf","open","className","style","width","placeholder","onChange","e","target","value","type","map","c","index","background","_entries","row","rowindex","display","col","minWidth","border","justifyContent","alignItems","fontSize","padding","includes","cursor","textDecoration","textDecorationThickness","class","onClick","React","memo","wins","App","setList","isWating","setIsWating","spinner","setSpiner","Audio","sound","history","useHistory","length","localStorage","setItem","stringify","stoaredList","getItem","Board","tempList","i","push","backgroundColor","fontWeight","margin","borderLeft","borderRight","height","Button","variant","removeItem","size","zIndex","intervalId","setInterval","number","Math","floor","random","flag","setTimeout","clearInterval","disabled","Spinner","animation","label","FormCheck","textAlign","borderColor","constSets","Ticket","player","setPlayers","setSets","password","setPassword","openField","setOpenField","updateTickets","ticketDoc","doc","updateDoc","alert","tempCard","card","myID","marginLeft","v","ticket","set","tickets","tamblo","generateTickets","rows","init","all","top","bottom","middle","corner","PlayCard","ticketId","useParams","tempId","claps","audio","corners","setCorners","showGIF","setShowGIF","Array","fill","myCard","setMyCard","myCount","setMyCount","ar","arr","temp1","temp2","temp","setconerValues","cardindex","colindex","cardIndex","count","play","src","img","overflow","path","component","Main","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9f417b7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spin.16183bed.mp3\";","import { initializeApp } from \"firebase/app\";\nimport { getFirestore } from \"@firebase/firestore\";\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAWBao_ZI8vLJIloZ4RN-iiwpCpQyjYznM\",\n    authDomain: \"ticket-afeb3.firebaseapp.com\",\n    projectId: \"ticket-afeb3\",\n    storageBucket: \"ticket-afeb3.appspot.com\",\n    messagingSenderId: \"12088333664\",\n    appId: \"1:12088333664:web:5c99748047e3c7e964fa05\",\n    measurementId: \"G-TKVGNV2VSX\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const fireStore = getFirestore(app)","import React, { useEffect, useState } from \"react\";\nimport { collection, getDocs } from \"firebase/firestore\"\nimport { fireStore } from \"../firebase\";\n\nconst wins = [\n    \"Early 5\",\n    \"Top Line\",\n    \"Middle Line\",\n    \"Bottom Line\",\n    \"Four Corners\",\n    \"Full House 1\",\n    \" Full House 2\"\n]\n\nconst constSets = [1, 2, 3, 4, 5, 6];\nconst colors = [\"red\", \"green\", \"blue\", \"purple\", \"orange\", \"yellow\"]\n\nfunction VerifyCard({ openDialog, setOpenDialog, list }) {\n    const [id, setId] = useState()\n    const [color, setColor] = useState(\"red\")\n    const ticketCollectionRef = collection(fireStore, \"tickets\")\n    const [onlineCards, setOnlineCards] = useState({})\n    const [selectedCard, setSelectedCard] = useState([])\n\n    const onCloseDialog = () => {\n        setSelectedCard([])\n        setOpenDialog(false)\n    }\n\n    useEffect(() => {\n        const getTickets = async () => {\n            let data = await getDocs(ticketCollectionRef)\n            data = data.docs[0].data()\n            setOnlineCards({ list: JSON.parse(data.list), sets: data.sets, players: data.players })\n        }\n        getTickets()\n    }, [])\n\n    useEffect(()=>{\n        if(id && color){\n            let b = parseInt(id - 1) * onlineCards.sets\n            let a = colors.indexOf(color)\n            setSelectedCard(onlineCards.list[a + b])\n        }\n    },[id, color])\n\n    const changeColor = (e) => setColor(e.target.value)\n\n    return (\n        <dialog open={openDialog}>\n            <div>\n                <div>\n                    <input className=\"mr-3 p-1\" style={{ width: \"100px\" }} placeholder=\"card id\" onChange={(e) => setId(e.target.value)} type=\"number\" />\n                    <label className=\"mr-2\">select Color : </label>\n                    <select onChange={changeColor} className=\"px-2 py-1\" >\n                        {colors.map((c,index) => index < onlineCards.sets && <option value={c} style={{ background: c }} >{c}</option>)}\n                    </select>\n                </div>\n            </div>\n            <div className=\"p-2\">\n                {id !== \"\" && onlineCards.players != 0 && (parseInt(id) > onlineCards.players || id <= 0) ?\n                    <h3>Card Not Found</h3> :\n                    <>{selectedCard?._entries?.map((row, rowindex) =>\n                        <div style={{ display: \"flex\" }}>\n                            {row.map((col) => <button\n                                style={{\n                                    width: \"15%\",\n                                    minWidth: \"40px\",\n                                    border: \"1px solid\",\n                                    display: \"flex\",\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    fontSize: \"20px\",\n                                    padding: \"2%\",\n                                    background: col ? list.includes(col) ? \"#6c757d\" : \"#fff\" : color,\n                                    cursor: col ? \"pointer\" : \"unset\",\n                                    textDecoration: list.includes(col) ? \"line-through\" : \"none\",\n                                    textDecorationThickness: list.includes(col) ? \"1px\" : \"none\"\n                                }}>\n                                {col || \" \"}</button>)}\n                        </div>)\n                    }</>\n                }\n            </div>\n            <div className=\"d-flex justify-content-end\">\n                <button type=\"button\" class=\"btn btn-outline-danger btn-sm\" onClick={onCloseDialog}>close</button>\n            </div>\n        </dialog>\n    );\n}\n\nexport default React.memo(VerifyCard);\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Spinner, FormCheck } from \"react-bootstrap\";\nimport { useHistory } from 'react-router-dom';\nimport sound from \"../assets/spin.mp3\"\nimport VerifyCard from \"./VerifyCard\";\nconst wins = [\n  \"Early 5\",\n  \"Top Line\",\n  \"Middle Line\",\n  \"Bottom Line\",\n  \"Four Corners\",\n  \"Full House 1\",\n  \" Full House 2\"\n]\n\nfunction App() {\n  const [list, setList] = useState([]);\n  const [isWating, setIsWating] = useState(false);\n  const [spinner, setSpiner] = useState(1);\n  const [audio, setAudio] = useState(new Audio(sound));\n  const history = useHistory();\n  const [openDialog, setOpenDialog] = useState(false)\n\n  const onOpenDialog = () => setOpenDialog(true)\n\n\n  useEffect(() => {\n    if (list.length) localStorage.setItem(\"numbers\", JSON.stringify(list))\n  }, [list])\n\n  useEffect(() => {\n    let stoaredList = JSON.parse(localStorage.getItem(\"numbers\"))\n    if (stoaredList) setList(stoaredList)\n  }, [])\n\n  const handleOnReset = () => {\n    setList([])\n    localStorage.removeItem(\"numbers\")\n  }\n\n  const handleOnClick = () => {\n    if (list.length < 90) {\n      let intervalId = setInterval(() => {\n        let number = Math.floor(Math.random() * (91 - 1) + 1)\n        setSpiner(number)\n      }, 50)\n      let flag = true;\n      while (flag) {\n        let number = Math.floor(Math.random() * (91 - 1) + 1)\n        if (!list.includes(number)) {\n          setIsWating(true)\n          // audio.play()\n          flag = false\n          setTimeout(() => {\n            clearInterval(intervalId)\n            setList([...list, number])\n            setIsWating(false)\n            // audio.remove()\n          }, 2000)\n        }\n      }\n    }\n  }\n\n  const Board = () => {\n    let tempList = []\n    let row = []\n    for (let i = 1; i <= 90; i++) {\n\n      row.push(<div\n        className={`col  ${list.includes(i) ? \"border-danger\" : \"\"} rounded-pill mx-2 my-2`}\n        style={{ backgroundColor: list.includes(i) ? \"#d5e4f3\" : \"\" }}>\n        <span style={{ fontSize: \"25px\", color: !list.includes(i) ? \"#6c757d\" : \"\", fontWeight: !list.includes(i) ? \"100\" : \"bold\" }}><b>{i}</b></span>\n      </div>)\n\n      if (i % 10 === 0) {\n        tempList.push(<div className=\"row\" style={{ margin: \"0px\", width: \"auto\", borderLeft: \"1px solid #fff\", borderRight: \"1px solid\" }}>{row}</div>)\n        row = []\n      }\n    }\n    return tempList;\n  }\n\n  return (\n    <div className=\"row\" style={{ height: \"100vh\", border: \"2px solid\" }}>\n      <div className=\"col-3 d-flex align-items-center flex-column pt-3\" style={{ backgroundColor: \"#adb5bd\" }}>\n        <div className=\"d-flex justify-content-center\">\n          <Button variant=\"info\" onClick={handleOnReset} size=\"sm\">\n            Reset\n          </Button>\n          <Button className=\"ml-3\" variant=\"secondary\" onClick={() => history.push(\"/tickets\")} size=\"sm\">\n            generate tickets\n          </Button>\n          <Button className=\"ml-3\" style={{ zIndex: 1 }} variant=\"warning\" onClick={() => history.push(\"/card\")} size=\"sm\">\n            Play Card\n          </Button>\n          <Button className=\"ml-3\" style={{ zIndex: 1 }} variant=\"danger\" onClick={onOpenDialog} size=\"sm\">\n            Verify Card\n          </Button>\n        </div>\n        <div style={{ fontSize: \"20px\" }} className=\"pt-2\">Previous</div>\n        <div style={{ width: \"100px\", height: \"100px\" }} className=\"d-flex align-items-center justify-content-center border border-secondary rounded-circle mb-1\" >\n          {list.length !== 0 &&\n            <span style={{ fontSize: \"60px\", color: \"grey\" }}>\n              {list[list.length - 2]}\n            </span>\n          }\n        </div>\n        <div style={{ width: \"200px\", height: \"200px\", background: \"#d5e4f3\" }} className=\"d-flex align-items-center justify-content-center border border-dark rounded-circle\" >\n          {isWating ?\n            <span style={{ fontSize: \"135px\", color: \"grey\" }}>\n              {spinner}\n            </span> :\n            list.length ?\n              <span style={{ fontSize: list.length != 0 ? \"135px\" : \"50px\", fontWeight: \"bold\" }}>\n                {list[list.length - 1]}\n              </span> :\n              <h2>Start With Spin &#x21e9;</h2>\n          }\n        </div>\n        <Button className=\"mt-3\" onClick={handleOnClick} disabled={isWating}>\n          {isWating ?\n            <Spinner animation=\"border\" variant=\"info\" /> :\n            <>Spin &#x27F3;</>\n          }\n        </Button>\n        <div class=\"d-flex flex-wrap mt-2 mx-4\">\n          {wins.map(label => <FormCheck style={{ width: \"120px\", textAlign: \"left\" }} className=\"p-2\" label={label} />)}\n        </div>\n      </div>\n      <div className=\"col-9 pt-2\" style={{ height: \"100%\", backgroundColor: \"#adb5bd\", borderLeft: \"1px solid\" }}>\n        <div>\n          <h1><b>Good Luck...!</b></h1>\n          <div class=\"d-flex mx-5 mb-5 bg-dark\" style={{ borderColor: \"#adb5bd\", border: \"5px solid #d5e4f3\" }}>\n            <Board />\n          </div>\n        </div>\n      </div>\n      <VerifyCard openDialog={openDialog} setOpenDialog={setOpenDialog} list={list}/>\n    </div>\n  );\n}\n\nexport default React.memo(App);\n","import React, { useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport tamblo from \"tambola-generator\"\nimport { useHistory } from 'react-router-dom';\nimport { collection, updateDoc, doc } from \"firebase/firestore\"\nimport { fireStore } from \"../firebase\";\n\nconst constSets = [1, 2, 3, 4, 5, 6];\nconst colors = [\"red\", \"green\", \"blue\", \"purple\", \"orange\", \"yellow\"]\n\nfunction Ticket() {\n    const [list, setList] = useState([]);\n    const [player, setPlayers] = useState(0);\n    const [sets, setSets] = useState(1);\n    const [password, setPassword] = useState(\"\")\n    const [openField, setOpenField] = useState(false)\n\n\n    const history = useHistory()\n\n    const updateTickets = async () => {\n        if (password === \"admin123\") {\n            const ticketDoc = doc(fireStore, \"tickets\", \"tickets\")\n            let data = {\n                list: JSON.stringify(list),\n                players: parseInt(player),\n                sets: sets\n            }\n            await updateDoc(ticketDoc, data)\n            alert(\"tickets uploaded successfully\")\n            setOpenField(false)\n        } else {\n            alert(\"password mismatch\")\n        }\n    }\n    const handelSubmit = () => {\n        let tickets = tamblo.generateTickets(parseInt(player * sets))\n        setList(tickets)\n    }\n\n    const Card = () => {\n        const func = (card, index) => {\n            let myID = Math.floor(index / sets) + 1\n            let color = colors[index % sets]\n            return <><div className=\"mb-4\">\n                <div id={`${myID}_${color}`} style={{ marginLeft: \"20px\", padding: \"30px\", background: \"#fff\" }} className=\"border border-success\" >\n                    <span>{color}</span>\n                    {card._entries.map(row =>\n                        <div class=\"row \">\n                            {row.map(col => <div class=\"col border border-dark\" style={{ width: \"40px\", height: \"40px\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\", fontSize: \"20px\", background: col ? \"#fff\" : color }}>{col || \" \"}</div>)}\n                        </div>)\n                    }\n                    <span> ticket : {`${myID}_${color}`}</span>\n                </div>\n            </div>\n            </>\n        }\n        return func;\n    }\n\n    const tempCard = Card();\n\n    return (\n        <>\n            {!list.length ?\n                <div className=\"row\" style={{ height: \"100vh\", background: \"#cccbab\", width: \"100%\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n                    <div>\n                        <Button onClick={() => history.push(\"/\")} size=\"sm\" variant=\"success\" className=\"mb-2\">Home</Button>\n                        <div>\n                            <input style={{ padding: \"10px\" }} placeholder=\"enter number of players\" onChange={(e) => setPlayers(e.target.value)} type=\"number\" />\n                        </div>\n                        <div className=\"mt-2\">\n                            <label className=\"mr-3\">select number of sets : </label>\n                            <select onChange={(e) => setSets(parseInt(e.target.value))} className=\"px-2 py-1\">\n                                {constSets.map(set => <option value={set} >{set}</option>)}\n                            </select>\n                        </div>\n                        <div className=\"mt-5\">\n                            <Button onClick={handelSubmit} variant=\"success\">Generate Tickets</Button>\n                        </div>\n                    </div>\n                </div> :\n                <div style={{ background: \"#cccbab\" }} className=\"mb-5\">\n                    <Button onClick={() => history.push(\"/\")} size=\"sm\" variant=\"success\" className=\"mb-2\">Home</Button>\n                    <Button onClick={() => setOpenField(v => !v)} size=\"sm\" variant=\"warning\" className=\"ml-2 mb-2\">Upload Ticket</Button>\n                    {openField && <div>\n                        <input type=\"text\" value={password} onChange={(e) => setPassword(e.target.value)} />\n                        <Button onClick={updateTickets} size=\"sm\" variant=\"primary\" className=\"ml-2 mb-2\">Submit</Button>\n                    </div>}\n                    <div className=\"row\" >\n                        {list.map((ticket, index) => tempCard(ticket, index))}\n                    </div>\n                </div>\n            }\n        </>\n    );\n}\n\nexport default React.memo(Ticket);\n\n","export default __webpack_public_path__ + \"static/media/clap.ba7b35d2.mp3\";","export default __webpack_public_path__ + \"static/media/clapman.d389f1c3.gif\";","import React, { useEffect, useState } from \"react\";\nimport { collection, getDocs } from \"firebase/firestore\"\nimport { fireStore } from \"../firebase\";\nimport { Button } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\"\nimport claps from \"../assets/clap.mp3\"\nimport img from \"../assets/clapman.gif\"\nconst colors = [\"red\", \"green\", \"blue\", \"purple\", \"orange\", \"yellow\"]\nlet rows = [\"top\", \"middle\", \"bottom\"]\nconst init = { all: 0, top: 0, bottom: 0, middle: 0, corner: 0 }\n\nfunction PlayCard() {\n    const [list, setList] = useState([]);\n    const [sets, setSets] = useState(1);\n    const [id, setId] = useState(\"\")\n    const { ticketId } = useParams()\n    let tempId = \"\"\n    const [audio, setAudio] = useState(new Audio(claps));\n    const [players, setPlayers] = useState(0);\n    const [selectedCard, setSelectedCard] = useState([])\n    const [corners, setCorners] = useState([])\n    const ticketCollectionRef = collection(fireStore, \"tickets\")\n    const [showGIF, setShowGIF] = useState(null)\n\n    const [myCard, setMyCard] = useState([...Array(3)].map(e => Array(9).fill(null)))\n    const [myCount, setMyCount] = useState([])\n\n    useEffect(() => {\n        const getTickets = async () => {\n            let data = await getDocs(ticketCollectionRef)\n            data = data.docs[0].data()\n            setList(JSON.parse(data.list))\n            setSets(data.sets)\n            setPlayers(data.players)\n        }\n        getTickets()\n    }, [])\n\n    useEffect(() => {\n        if (ticketId) {\n            setId(parseInt(ticketId))\n        }\n    }, [ticketId])\n\n    useEffect(() => {\n        if (showGIF) {\n            setTimeout(() => {\n                setShowGIF(null)\n            }, 3500)\n        }\n    }, [showGIF])\n\n    const setconerValues = (ar) => {\n        let arr = []\n        ar.map(card => {\n            let temp1 = []\n            card._entries[0].map(col => {\n                if (col != 0) temp1.push(col)\n            })\n            let temp2 = []\n            card._entries[2].map(col => {\n                if (col != 0) temp2.push(col)\n            })\n            let temp = [temp1[0], temp1[4], temp2[0], temp2[4]]\n            arr.push(temp)\n        })\n        setCorners(arr)\n    }\n\n    useEffect(() => {\n        if (list.length > 0 && sets && parseInt(id) <= players && parseInt(id) > 0) {\n            setMyCount([...Array(sets)].map(e => ({ ...init })))\n            setMyCard([...Array(sets)].map(e => [...Array(3)].map(e => Array(9).fill(null))))\n            let ar = []\n            let start = (parseInt(id) - 1) * sets;\n            for (let i = start; i < parseInt(id) * sets; i++) {\n                ar.push(list[i])\n            }\n            setconerValues(ar)\n            setSelectedCard(ar)\n        }\n\n    }, [id, list, players, sets])\n\n    const onClick = (cardIndex, rowindex, colindex, col) => {\n        if (col != 0) {\n            let arr = [...myCard]\n            let count = { ...myCount }\n            if (arr[cardIndex][rowindex][colindex] === null) {\n                arr[cardIndex][rowindex][colindex] = col\n                count[cardIndex].all = myCount[cardIndex].all + 1\n                count[cardIndex][rows[rowindex]] = myCount[cardIndex][rows[rowindex]] + 1\n\n                if (corners[cardIndex].includes(col)) {\n                    count[cardIndex].corner = myCount[cardIndex].corner + 1\n                }\n\n            } else {\n                arr[cardIndex][rowindex][colindex] = null\n                count[cardIndex].all = myCount[cardIndex].all - 1\n                count[cardIndex][rows[rowindex]] = myCount[cardIndex][rows[rowindex]] - 1\n\n                if (corners[cardIndex].includes(col)) {\n                    count[cardIndex].corner = myCount[cardIndex].corner - 1\n                }\n            }\n            setMyCard(arr)\n            setMyCount(count)\n            if (count[cardIndex].all == 15) {\n                setShowGIF(cardIndex + 1)\n                audio.play()\n            }\n        }\n    }\n\n    return (\n        <>\n            {id === \"\" && <div>\n                <input placeholder=\"insert you ticket id\" className='m-5 p-3' onChange={(e) => tempId = e.target.value} />\n                <Button onClick={() => setId(tempId)} className='m-5' variant=\"success\">Submit</Button>\n            </div>\n            }\n            {selectedCard.map((card, cardindex) => <div style={{background: \"#fff\", border: \"1px solid\" }} className=\"d-sm-flex p-1 p-md-3 m-0 m-md-3\">\n                <div className=\"w-sm-100 col-sm-9 p-0\">\n                    {card._entries.map((row, rowindex) =>\n                        <div style={{ display: \"flex\", height: \"30%\" }}>\n                            {row.map((col, colindex) => <button\n                                style={{\n                                    // lexBasis: 0,\n                                    // flexGrow: 1,\n                                    // maxWidth: \"100%\",\n                                    width: \"15%\",\n                                    minWidth: \"30px\",\n                                    border: \"1px solid\",\n                                    display: \"flex\",\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    fontSize: \"20px\",\n                                    padding: \"2%\",\n                                    background: col ? (myCard[cardindex][rowindex][colindex] ? \"#6c757d\" : \"#fff\") : colors[cardindex],\n                                    cursor: col ? \"pointer\" : \"unset\",\n                                    textDecoration: myCard[cardindex][rowindex][colindex] ? \"line-through\" : \"none\",\n                                    textDecorationThickness: myCard[cardindex][rowindex][colindex] ? \"1px\" : \"none\"\n                                }}\n                                onClick={(e) => onClick(cardindex, rowindex, colindex, col)}>\n                                {col || \" \"}</button>)}\n                        </div>)\n                    }\n                </div>\n                {myCount[cardindex].all == 15 ?\n                    showGIF == cardindex + 1 && <img src={img} height=\"180px\" className=\"p-2\"></img> :\n                    <div style={{ textAlign: \"left\", marginLeft: \"10px\", fontSize: \"14px\", fontWeight: \"600\" }}>\n                        <div style={{ padding: \"3px\" }}>\n                            Early 5: {myCount[cardindex].all >= 5 ? <>&#x2705;</> : <>&#10060;</>}\n                        </div>\n                        <div style={{ padding: \"3px\" }}>\n                            Top Line: {myCount[cardindex].top == 5 ? <>&#x2705;</> : <>&#10060;</>}\n                        </div>\n                        <div style={{ padding: \"3px\" }}>\n                            Middle Line: {myCount[cardindex].middle == 5 ? <>&#x2705;</> : <>&#10060;</>}\n                        </div>\n                        <div style={{ padding: \"3px\" }}>\n                            Bottom Line: {myCount[cardindex].bottom == 5 ? <>&#x2705;</> : <>&#10060;</>}\n                        </div>\n                        <div style={{ padding: \"3px\" }}>\n                            Four Corners: {myCount[cardindex].corner == 4 ? <>&#x2705;</> : <>&#10060;</>}\n                        </div>\n                        <div style={{ padding: \"3px\" }}>\n                            Full House 1: {myCount[cardindex].all == 15 ? <>&#x2705;</> : <>&#10060;</>}\n                        </div>\n                    </div>}\n            </div>)}\n            {id !== \"\" && players != 0 && (parseInt(id) > players || id <= 0) && <h1>Card Not Found</h1>}\n        </>\n    );\n}\n\nexport default React.memo(PlayCard);\n","import './App.css';\nimport React from \"react\";\nimport Main from \"./components/main\";\nimport Ticket from \"./components/ticket\";\nimport PlayCard from './components/PlayCard';\nimport { Route, Switch } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{ overflow: \"hidden\" }}>\n      <Switch>\n        <Route path='/tickets' component={Ticket} />\n        <Route path='/card/:ticketId' component={PlayCard} />\n        <Route path='/card' component={PlayCard} />\n        <Route path='/' component={Main} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default React.memo(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter} from 'react-router-dom';\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}